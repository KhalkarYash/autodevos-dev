from __future__ import annotations

from pathlib import Path
from typing import Any

from meta_agent.utils import ensure_dir, write_text, write_json, log
from meta_agent.llm_interface import BaseLLM
from meta_agent.context_manager import MCPContext


def generate_ui(prompt: str, ctx: MCPContext, out_dir: Path, llm: BaseLLM) -> None:
    """Generate a React+TypeScript frontend using Vite and Tailwind CSS."""
    project_dir = out_dir 
    ensure_dir(project_dir / "src")

    pkg = {
        "name": "autodevos-frontend",
        "private": True,
        "version": "0.1.0",
        "type": "module",
        "scripts": {
            "dev": "vite",
            "build": "tsc -b && vite build",
            "preview": "vite preview",
            "test": "jest --passWithNoTests"
        },
        "dependencies": {
            "react": "^18.3.1",
            "react-dom": "^18.3.1"
        },
        "devDependencies": {
            "@types/react": "^18.3.5",
            "@types/react-dom": "^18.3.0",
            "@vitejs/plugin-react": "^4.3.3",
            "autoprefixer": "^10.4.20",
            "postcss": "^8.4.47",
            "tailwindcss": "^3.4.14",
            "typescript": "^5.6.3",
            "vite": "^5.4.8",
            "jest": "^29.7.0",
            "ts-jest": "^29.3.4",
            "@types/jest": "^29.5.14",
            "@testing-library/react": "^16.0.1",
            "@testing-library/jest-dom": "^6.6.3",
            "jest-environment-jsdom": "^29.7.0"
        }
    }
    write_json(project_dir / "package.json", pkg)

    tsconfig = {
        "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": True,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": True,
            "jsx": "react-jsx",
            "moduleResolution": "Bundler",
            "resolveJsonModule": True,
            "isolatedModules": True,
            "noEmit": True,
            "esModuleInterop": True,
            "allowJs": False,
            "strict": True,
            "forceConsistentCasingInFileNames": True,
            "types": ["jest", "@testing-library/jest-dom"]
        },
        "include": ["src", "vite.config.ts", "jest.config.ts", "setupTests.ts"]
    }
    write_json(project_dir / "tsconfig.json", tsconfig)

    vite_cfg = (
        "import { defineConfig } from 'vite'\n"
        "import react from '@vitejs/plugin-react'\n\n"
        "export default defineConfig({\n  plugins: [react()],\n})\n"
    )
    write_text(project_dir / "vite.config.ts", vite_cfg)

    index_html = (
        "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>AutoDevOS Frontend</title>\n  </head>\n  <body class=\"min-h-screen bg-gray-50 text-slate-900\">\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
    )
    write_text(project_dir / "index.html", index_html)

    postcss = (
        "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n"
    )
    write_text(project_dir / "postcss.config.js", postcss)

    tailwind = (
        "/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{ts,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n"
    )
    write_text(project_dir / "tailwind.config.js", tailwind)

    css = (
        "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"
    )
    ensure_dir(project_dir / "src")
    write_text(project_dir / "src/index.css", css)

    main_tsx = (
        "import React from 'react'\n"
        "import ReactDOM from 'react-dom/client'\n"
        "import './index.css'\n"
        "import App from './App'\n\n"
        "ReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n"
    )
    write_text(project_dir / "src/main.tsx", main_tsx)

    # Use LLM to synthesize a user-facing description/component
    ui_component_code = llm.generate_code(f"Generate a React TypeScript App component for the frontend based on this prompt: {prompt}. Include Tailwind classes.")

    app_tsx = (
        "/* Auto-generated by Frontend Agent */\n" + ui_component_code + "\nexport default App;\n" if "export default" not in ui_component_code else ui_component_code
    )
    # Fallback minimal App if LLM didn't return TSX
    if "export default" not in app_tsx:
        app_tsx = (
            "import React from 'react'\n"
            "const App: React.FC = () => (\n  <div className='p-6'>\n    <h1 className='text-2xl font-bold'>AutoDevOS Frontend</h1>\n    <p className='mt-2'>This UI was generated for: {prompt}</p>\n  </div>\n)\n\nexport default App\n"
        )
    write_text(project_dir / "src/App.tsx", app_tsx)

    # Jest setup
    jest_cfg = (
        "import type { Config } from 'jest'\n\nconst config: Config = {\n  testEnvironment: 'jsdom',\n  transform: {\n    '^.+\\.(ts|tsx)$': ['ts-jest', { tsconfig: 'tsconfig.json' }],\n  },\n  moduleFileExtensions: ['ts', 'tsx', 'js'],\n  setupFilesAfterEnv: ['<rootDir>/setupTests.ts'],\n}\n\nexport default config\n"
    )
    write_text(project_dir / "jest.config.ts", jest_cfg)

    setup_tests = (
        "import '@testing-library/jest-dom'\n"
    )
    write_text(project_dir / "setupTests.ts", setup_tests)

    test_spec = (
        "import { render, screen } from '@testing-library/react'\n"
        "import React from 'react'\n"
        "import App from './App'\n\n"
        "test('renders title', () => {\n  render(<App />)\n  expect(screen.getByText(/AutoDevOS Frontend/i)).toBeInTheDocument()\n})\n"
    )
    write_text(project_dir / "src/App.test.tsx", test_spec)

    ctx.add_artifact("frontend", project_dir)
    log.info(f"Frontend generated at: {project_dir}")
